dependencies {
    implementation "org.eclipse.xtext:org.eclipse.xtext:${xtextVersion}"
    implementation "org.eclipse.xtext:org.eclipse.xtext.xbase.lib:${xtextVersion}"
    // https://mvnrepository.com/artifact/org.eclipse.platform/org.eclipse.core.runtime
    implementation group: 'org.eclipse.platform', name: 'org.eclipse.core.runtime', version: "${runtimeVersion}"
    // https://mvnrepository.com/artifact/org.eclipse.platform/org.eclipse.core.resources
    implementation group: 'org.eclipse.platform', name: 'org.eclipse.core.resources', version: "${resourcesVersion}"
    // https://mvnrepository.com/artifact/org.eclipse.emf/org.eclipse.emf.mwe2.launch
    implementation group: 'org.eclipse.emf', name: 'org.eclipse.emf.mwe2.launch', version: "${mwe2LaunchVersion}"
    // https://mvnrepository.com/artifact/org.eclipse.lsp4j/org.eclipse.lsp4j
    implementation group: 'org.eclipse.lsp4j', name: 'org.eclipse.lsp4j', version: "${lsp4jVersion}"
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.12.4'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.12.4'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.4'
}

configurations {
    mwe2 {
        extendsFrom implementation
    }
}

dependencies {
    mwe2 'org.eclipse.emf:org.eclipse.emf.mwe2.launch'
    mwe2 "org.eclipse.xtext:org.eclipse.xtext.common.types:${xtextVersion}"
    mwe2 "org.eclipse.xtext:org.eclipse.xtext.xtext.generator:${xtextVersion}"
}

task generateXtextLanguage(type: JavaExec) {
    main = 'org.eclipse.emf.mwe2.launch.runtime.Mwe2Launcher'
    classpath = configurations.mwe2
    inputs.file "src/org/lflang/GenerateLinguaFranca.mwe2"
    inputs.file "src/org/lflang/LinguaFranca.xtext"
    outputs.dir "src-gen"
    args += "src/org/lflang/GenerateLinguaFranca.mwe2"
    args += "-p"
    args += "rootPath=/${projectDir}/.."

    // Currently we don't need to delete any generated files because we use the
    // Java/Xtend implementations.  However, if we commit to porting such files
    // to Kotlin, we might to reintroduce the deletion mechanism below.
    /*doLast {
        def filesToDelete = [
                "org.lflang.validation.LFValidator",
                "org.lflang.LFRuntimeModule",
                "org.lflang.LFStandaloneSetup",
                "org.lflang.generator.LFGenerator",
                "org.lflang.scoping.LFScopeProvider"
        ]

        filesToDelete.each { qname ->
            def path = qname.replace('.', '/')
            def ktFile = file("src/${path}.kt")
            def javaFile = file("src/${path}.java")
            def xtendFile = file("src/${path}.xtend")

            if (ktFile.exists() || xtendFile.exists()) {
                def chosenLang = ktFile.exists() ? "Kotlin" : "Xtend"
                project.logger.info("deleting ${projectDir.relativePath(javaFile)}, the ${chosenLang} file prevails")
                project.delete(javaFile) // generated by Xtend
            } else {
                project.logger.info("no ${projectDir.relativePath(ktFile)}, leaving the Java implementation in")
            }
        }
    }*/
}
processResources.dependsOn(generateXtextLanguage)
generateXtext.dependsOn(generateXtextLanguage)
clean.dependsOn(cleanGenerateXtextLanguage)
eclipse.classpath.plusConfigurations += [configurations.mwe2]

// Antlr4
task runAntlr4(type:JavaExec) {
   //see incremental task api, prevents rerun if nothing has changed.
   inputs.dir "$projectDir/src/org/lflang/dsl/antlr4/"
   outputs.dir "$projectDir/src/org/lflang/dsl/generated/antlr4/main/"

   classpath = configurations.antlr4

   main = "org.antlr.v4.Tool" 

   args = [ "-visitor", 
            "-o",  "$projectDir/src/org/lflang/dsl/generated/antlr4/main/",  
            "-package", "org.lflang.dsl",
            "$projectDir/src/org/lflang/dsl/antlr4/MTLLexer.g4",
            "$projectDir/src/org/lflang/dsl/antlr4/MTLParser.g4",
            "$projectDir/src/org/lflang/dsl/antlr4/C.g4"]
}
processResources.dependsOn(runAntlr4)
compileKotlin.dependsOn(runAntlr4)
compileJava.dependsOn(runAntlr4)

clean {
    delete file("${projectDir}/src/org/lflang/dsl/generated")
}
